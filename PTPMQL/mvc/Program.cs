using Microsoft.EntityFrameworkCore;
using mvc.Data;
using mvc.Models;
using Microsoft.AspNetCore.Identity;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");

builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlite(connectionString));

builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = false)
    .AddEntityFrameworkStores<ApplicationDbContext>();

builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages(); // ðŸ‘ˆ thÃªm dÃ²ng nÃ y Ä‘á»ƒ Razor Pages (Identity) hoáº¡t Ä‘á»™ng

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles(); // ðŸ‘ˆ dÃ¹ng UseStaticFiles() thay vÃ¬ MapStaticAssets()

app.UseRouting();

app.UseAuthentication(); // ðŸ‘ˆ thÃªm dÃ²ng nÃ y
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.MapRazorPages(); // ðŸ‘ˆ map Razor Pages Ä‘á»ƒ Identity hoáº¡t Ä‘á»™ng

app.Run();
